<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="hotel_warehouse_inventory9.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1862"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="android_metadata" custom_title="0" dock_id="1" table="4,16:mainandroid_metadata"/><dock_state state="000000ff00000000fd00000001000000020000000000000000fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000011300ffffff000000000000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings/></tab_browse><tab_sql><sql name="SQL 2*">-- 1. Create mapping of lowest-ID item per name (case- and space-insensitive)
CREATE TEMP TABLE inventory_merge_map AS
SELECT 
    MIN(id) AS final_id,
    LOWER(TRIM(name)) AS norm_name
FROM inventory
GROUP BY norm_name;

-- 2. Update inventory_stock: point to the final (lowest id) item
UPDATE inventory_stock
SET inventory_id = (
    SELECT final_id 
    FROM inventory_merge_map
    WHERE norm_name = LOWER(TRIM((SELECT name FROM inventory WHERE id = inventory_stock.inventory_id)))
)
WHERE inventory_id IN (
    SELECT id FROM inventory
    WHERE LOWER(TRIM(name)) IN (
        SELECT norm_name FROM inventory_merge_map
    )
);

-- 3. Update item_aliases to point to the correct (final) inventory id
UPDATE item_aliases
SET inventory_id = (
    SELECT final_id
    FROM inventory_merge_map m
    JOIN inventory i ON m.norm_name = LOWER(TRIM(i.name))
    WHERE i.id = item_aliases.inventory_id
)
WHERE inventory_id IN (
    SELECT id FROM inventory
    WHERE LOWER(TRIM(name)) IN (SELECT norm_name FROM inventory_merge_map)
);

-- 4. Delete duplicates from inventory, keeping only the first ID
DELETE FROM inventory
WHERE id NOT IN (SELECT final_id FROM inventory_merge_map);
</sql><sql name="SQL 3*">SELECT 
  LOWER(TRIM(name)) AS normalized_name,
  COUNT(*) AS occurrences,
  GROUP_CONCAT(id) AS ids
FROM inventory
GROUP BY normalized_name
HAVING COUNT(*) &gt; 1
ORDER BY occurrences DESC;
</sql><current_tab id="1"/></tab_sql></sqlb_project>
