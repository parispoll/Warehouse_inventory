<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="hotel_warehouse_inventory7.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1873"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/><expanded_item id="4" parent="1"/></tab_structure><tab_browse><table title="categories" custom_title="0" dock_id="2" table="4,10:maincategories"/><dock_state state="000000ff00000000fd00000001000000020000045e000002b6fc0100000002fb000000160064006f0063006b00420072006f007700730065003101000000000000043c0000000000000000fb000000160064006f0063006b00420072006f007700730065003201000000000000045e0000011e00ffffff000002680000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="android_metadata" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="46"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="categories" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="109"/><column index="3" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="categories_new" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="300"/><column index="3" value="64"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="category_id_map" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="43"/><column index="2" value="49"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="inventory" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="39"/><column index="2" value="78"/><column index="3" value="300"/><column index="4" value="39"/><column index="5" value="78"/><column index="6" value="41"/><column index="7" value="53"/><column index="8" value="124"/><column index="9" value="76"/><column index="10" value="78"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="inventory_stock" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="81"/><column index="3" value="72"/><column index="4" value="55"/><column index="5" value="81"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="kitchen_import" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="4" mode="0"/></sort><column_widths><column index="1" value="78"/><column index="2" value="300"/><column index="3" value="78"/><column index="4" value="78"/><column index="5" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="locations" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="29"/><column index="2" value="117"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="water bar_UPDATED_CSV" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="4" mode="0"/></sort><column_widths><column index="1" value="78"/><column index="2" value="300"/><column index="3" value="78"/><column index="4" value="70"/><column index="5" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- 0. Clean up any previous temp tables
DROP TABLE IF EXISTS inventory_new_clean;
DROP TABLE IF EXISTS inventory_id_map;

-- 1. Create cleaned inventory table (one row per code with quantity IS NOT NULL)
CREATE TABLE inventory_new_clean AS
SELECT *
FROM inventory_new
WHERE id IN (
    SELECT MIN(id)
    FROM inventory_new
    WHERE quantity IS NOT NULL
    GROUP BY code
);

-- 2. Create ID mapping table from old inventory IDs to new
CREATE TEMP TABLE inventory_id_map AS
SELECT old.id AS old_id, new.id AS new_id
FROM inventory_new AS old
JOIN inventory_new_clean AS new USING(code)
WHERE old.id != new.id;

-- 3. Update referencing tables with new inventory IDs
UPDATE inventory_stock_new
SET inventory_id = (
    SELECT new_id FROM inventory_id_map
    WHERE inventory_stock_new.inventory_id = inventory_id_map.old_id
)
WHERE inventory_id IN (SELECT old_id FROM inventory_id_map);

UPDATE item_aliases_new
SET inventory_id = (
    SELECT new_id FROM inventory_id_map
    WHERE item_aliases_new.inventory_id = inventory_id_map.old_id
)
WHERE inventory_id IN (SELECT old_id FROM inventory_id_map);

UPDATE order_logs_new
SET inventory_id = (
    SELECT new_id FROM inventory_id_map
    WHERE order_logs_new.inventory_id = inventory_id_map.old_id
)
WHERE inventory_id IN (SELECT old_id FROM inventory_id_map);

-- 4. Delete any orphaned references that still point to dropped items
DELETE FROM inventory_stock_new
WHERE inventory_id NOT IN (SELECT id FROM inventory_new_clean);

DELETE FROM item_aliases_new
WHERE inventory_id NOT IN (SELECT id FROM inventory_new_clean);

DELETE FROM order_logs_new
WHERE inventory_id NOT IN (SELECT id FROM inventory_new_clean);


</sql><sql name="SQL 3*">-- Check inventory items with no stock
SELECT code, name FROM inventory
WHERE id NOT IN (SELECT inventory_id FROM inventory_stock);

-- Check inventory_stock rows with invalid inventory_id
SELECT * FROM inventory_stock
WHERE inventory_id NOT IN (SELECT id FROM inventory);

-- Check stock totals by location
SELECT l.name, COUNT(*) AS items, SUM(s.quantity) AS total_quantity
FROM inventory_stock s
JOIN locations l ON s.location_id = l.id
GROUP BY l.name;
</sql><current_tab id="1"/></tab_sql></sqlb_project>
